데이터 모델링이란 ?
- 현실세계를 데이터베이스로 표현하기 위해서 추상화 한다.(추상화 - 공통의 기능을 모아 개념화 한것)
개념적 모델링 -> 논리적 모델링 -> 물리적 모델링을 거친다

개념적 모델링
- 추상화 수준이이 가장 높은 수준의 모델링
(추상화수준이 높다는건 데이터의 구체적인 저장 위치나 내부 구조를 신경쓰지 않고 데이터를 조회하거나 조작하는데에
집중한것을 의미 복잡성을 감소시키고 개념을 단순화하여 이해와 사용은 용이하게 한것)

논리적 모델링
- 특정 데이터베이스 모델에 종속 식별자를 정의하고 관계, 속성등을 모두 표현한다.
- 정규화를 통해서 재사용성을 높인다 ( 정규화란 릴레이션(테이블)의 중복된 데이터를 분리하는것)
릴레이션은 관계형데이터베이스에서 테이블을 의미한다 튜플(로우행) 속성(컬럼)으로 구성된다

물리적 모델링
- 구축할 데이터베이스 관리 시스템에 테이블, 인덱스 등을 생성하는 단계이다.
- 성능, 보안, 가용성을 고려하여 데이터베이스를 구축한다.

데이터 모델링 관점
- 데이터 : 비지니스 프로세스에서 사용되는 데이터, 구조 분석, 정적 분석
- 프로세스 : 비즈니스 프로세스에서 수행하는 작업, 시나리오 분석, 도메인 분석, 동적 분석
- 데이터와 프로세스 : 프로세스와 데이터 간의 관계 CRUD 분석

Entity-Relationship-Diagram(ERD)
- 개체 관계 다이어그램으로 데이터베이스의 구조와 데이터 간의 관게를 시작적으로 표현하는 도구
ERD는 개체 관계 속성으로 구성

ERD 작성 절차
1. 엔티티(개체)를 도출하고 그린다.
2. 엔티티를 배치한다 (중요한 엔티티는 왼쪽 상단에 배치한다.)
3. 엔티티 간의 관계를 설정하다.
4. 관계명을 서술한다.
5. 관계 참여도를 표현한다 (관계 참여도 : 1개의 엔티티와 다른 엔티티 간의 참여하는 관계)
예) 게시글은 여러개의 댓글을 포함할 수 있다.
6. 관계의 피루 여부를 표현한다.
예 )게시글엔 작성한 멤버가 있어야 한다.

ERD 작성 시 교려사항
- 중요한 엔티티는 왼쪽 상단에 배치한다.
- ERD는 이해하기 쉬워야 하고, 너무 복잡하지 않아야 한다.

데이터 모델링 고려사항
1. 데이터 모델의 독립성
    - 독립성이 확보된 모델은 고객의 업무 변화에 능동적으로 대응할 수 있다.
    - 독립성을 확보하기 위해서는 중복된 데이터를 제거해야 한다. -> 정규화(데이터의 중복을 제거하는 방법)

2. 고객 요구사항의 표현
    - 데이터 모델링으로 고객과 데이터 모델러 간에 의사소통을 할 수 있어야 한다.
    - 고객의 요구사항을 간결하고 명확하게 표현한다.

3. 데이터 품질 확보
    - 데이터베이스 구축 시에 데이터 표준을 정의하고 표준 준수율을 관리해야 한다.
    (표준 준수율이란 데이터베이스의 구조가 데이터베이스 표준을 얼마나 준수했는지)
    - 데이터 표준을 확보해야 데이터 품질을 향상시킬 수 있다.

3중 스키마
- 데이터베이스 시스템에서 데이터의 구조와 관련된 세 가지 단계로 구성된 개념
- 외부 스키마 : 사용자나 응용 프로그램의 관점에서 데이터베이스를 정의 (사용자 관점)
    외부 스키마는 사용자가 데이터베이스에 접근하고 조작하기 위해 필요한 데이터베이스의 논리적인 구조를 정의
    데이터베이스 시스템을 사용하는 각 사용자 또는 응용 프로그램마다 별도의 외부 스키마가 존재할 수 있음.
    사용자는 외부 스키마를 통해 필요한 데이터에 접근하고 쿼리를 실행할 수 있음.
- 개념 스키마 : 전체 데이터베이스의 논리적인 구조를 정의 (설계자 관점)
    데이터베이스의 모든 외부 스키마를 통합하여 표현
    데이터베이스의 시스템의 설계와 관리를 위한 중요한 단계
    개념 스키마는 데이터베이스의 전체적인 구조, 테이블 간의 관계, 제약 조건등을 정의

- 내부 스키마 : 데이터베이스의 물리적 저장구조와 데이터베이스 시스템의 내부 동작을 정의(개발자 관점)
    데이터의 저장 방법, 인덱스 구조, 접근 경로 등을 포함
    하드웨어와 관련된 세부 사항을 다룸
    데이터베이스 시스템이 데이터를 저장, 검색, 조작하는 방식을 정의

3중 스키마는 데이터베이스 시스템의 구조를 분리허여 각각의 단계에서 데이터를 다른 관점에서 정의하고
관리함으로써 데이터의 독립성, 상호 운용성, 유지보수 성을 증가시킬 수 있습니다.
외부 스키마는 사용자와 응용 프로그램에게 필요한 데이터에 집중하고, 개념 스키마는 전체적인 데이터베이스 구조를 관리
내부 스키마는 물리적인 데이터 저장 방식을 다룹니다.

엔티티(Entity)
    현실세계에 독립적으로 존재하는 개념을 추상화한 데이터
    업무에서 관리해야 하는 데이터 집함
    저장되고 관리되어야 하는 데이터
    개념, 사건, 장소 등의 명사

엔티티 도출
    엔티티는 고객의 비즈니스 프로세스 에서 관리되어야 하는 정보를 추출해야 한다.

예)
    1. 고객이 회원가입을 한다. 회원으로 가입할 때는 회원ID, 패스워드, 이름, 주소, 전화번호 등을 입력해야 한다.
    2. 회원으로 가입하기 위해서는 반드시 하나의 게좌를 개설해야 한다.
    3. 고객은 계좌를 여러 개 개설할 수 있다.
    4. 계좌를 개설할 떄는 계좌번호, 계좌명, 예수금, 게좌개설 지점, 게좌담당자가 입력된다.

엔티티 특징
    식별자 : 엔티티는 유일한 식별자가 있어야 한다(PK)
    인스턴스 집합 : 2개 이상의 인스턴스가 있어야 한다.
    속성 : 엔티티는 반드시 속성를 가지고 있다
    관계 엔티티는 다른 엔티티와 최소한 1개 이상의 관계가 있어야 한다.
    업무 : 엔티티는 업무에서 관리되어야 하는 집합 이다.

엔티티 종류
- 유형과 무형에 따른 종류
    - 물리적 형태의 존재 여부
    유형 엔티티 : 업무에서 도출되며 지속적으로 사용되는 엔티티 (게시글)
    개념 엔티티 : 유형 엔티티는 물리적 형태가 있지만, 개념 엔티티는 물리적 형태가 없다.
        개념적으로 사용되는 엔티티 이다. 예) 거래서 종목, 생명보험 상품, 카테고리
    사건 엔티티 : 비지니스 프로세스를 실행하면서 생성되는 엔티티 이다 (조회수, 추천, 주문체결)

- 발행 시점에 따른 종류
    - 기본 엔티티 : 키 엔티티라고도 한다.
        다른 엔티티로부터 영향을 받지 않고 독립적으로 생성되는 엔티티
        (고객, 상품, 부서 등)
    - 중심 엔티티 : 기본 엔티티와 행위 엔티티 간의 중간에 있는 것
        예) 계좌, 주문, 취소, 체결
    - 행위 엔티티 : 2개의 엔티티로부터 발생하는 것
        예) 주문 이력, 체결 이력 등

속성
    업무에 필요한 정보인 엔티티가 가지는 항목
    더 이상 분리되지 않는 단위로, 업무에 필요한 데이터를 저장할 수 있음.
    인스턴스(ROW 행)의 구성요소이고 더 이상 분해되지 않음.

속성의 종류
    단일 속성 : 하나의 의미로 구성된것
    복합 속성 : 여러 개의 의미가 있는 것 (상위 주소 하위 주소)
    다중값 속성 : 속성에 여러 개의 값을 가질 수 있는 것
     보통 엔티티를 새로 팜 게시글의 댓글이 여러개면 댓글에서 게시글을 FK로 참조
     게시글엔 정보 X

     기본 속성 : 엔티티의 특징에 맞는 속성 값 예금 엔티티의 이자율
     파생 속성 : 속성에 따라 도출되는 파생 속성 예)이자
     설계 속성 : 예금 엔티티의 예금 코드는 따로 개념 엔티티를 만들어 분리 한다.

도메인
    속성이 가질 수 있는 값의 범위 예) 성별이라는 속성의 도메인은 '남자'와 '여자'이다.

관계
    엔티티 간의 관련성
    분류 :
        1. 존재 관계 : 2개의 엔티티가 존재 여부의 관계가 있는 것
        예) 고객이 은행에 회원가입을 하면, 관리점이 할당되고, 그 할당된 관리점에서 고객을 관리한다.
        2. 행위 관계 : 2개의 엔티티가 어떤 행위에 의한 관련성이 있는 것
        예) 계좌를 사용해서 주문을 발주하는 관계, 증권회사는 계좌를 개설하고 주문을 발주한다.

관계 차수(Cardinality)
    두 개의 엔티티 간에 관계에 참여하는 수
    예) 1명의 고객은 여러 개의 계좌를 개설할 수 있다.

    필수적 관계는 '|'로 표현되고, 선택적 관계는 'O'로 표현된다.

식별 관계 (실선 표현)
    고객과 계좌 엔티티에서 고객은 독립적으로 존재할 수 있는 강한 개체(Strong Entity)이다.
    강한 개체란 ?
        누구에게도 지배되지 않는 독립적인 개체
        어떤 다른 엔티티에게 의존하지 않고 독립적으로 존재
        다른 엔티와 관계를 가질 떄 다른 엔티티에게 기본키를 공유한다 (게시글은 멤버의 기본키를 공유한다)
        고객엔티티의 기본적인 회원id를 계좌 엔티티의 기본키의 하나로 공유하는 것
        기본키 값이 변경되면, 식별 관계(FK키를 가지고 있는)에 있는 엔티티의 값도 변경된다.
    약한 개체
        개체의 존재가 다른 개체의 존재에 달려 있는 개체(댓글, 개체가 없으면 댓글도 없다)

비식별 관계
    강한 개체의 기본키를 다른 엔티티의 기본키가 아닌 일반 칼럼(열)으로 관계를 가지는 것 (점선 표현)
    예) 관리점 엔티티의 기본 키는 지점코드이고, 고객 엔티티와 비식별 관계를 가지고 있다.

식별관계는 강한 개체와 강한 개체에 의존하는 약한 개체의 관계를 표현 - 고객 - 계좌 , 게시글 - 댓글 (실선표현)
비식별관계는 강한 개체의 기본키를 일반 컬럼으로 가지고 있는 관계 (점선 표현) 의존하는 정도가 약함

엔티티 식별자(Primary Key)
    최소성 : 주식별자는 최소성을 만족하는 키이다.
    대표성 : 주식별자는 엔티티를 대표할 수 있어야 한다.
    유일성 : 주식별자는 엔티티의 인스턴스를 유일하게 식별한다.
    불변성 : 주식별자는 자주 변경되지 않아야 한다.(예전에 주민등록번호가 pk였던 컬럼들 이제는 자체 id를 pk로하는추세)

키의 종류
    기본키(PK) :  후보키 중에서 엔티티를 대표 할 수 있는 키
    후보키 : 유일성과 최소성을 만족시키는 키
    슈퍼키 : 유일성은 만족하지만 최소성을 만족하지 않는 키
    대체키 : 여러개의 후보키 중에서 기본키를 선정하고 남은 키
    외래키 : 하나 혹은 다수의 다른 테이블의 기본키 필드를 가리키는 것
        참조 무결성을 확인하기 위헤ㅐ 사용되는 키
        허용된 데이터 값만 데이터베이스에 저장하기 위해 사용


식별자의 종류
    식별자는 대표성, 생성 여부, 속성의 수, 대체 여부로 분류 된다.

식별자의 대표성
    주식별자 : 엔티티를 대표할 수 있는 식별자
    보조식별자 : 유일성과 최소성은 만족하지만 대표성을 만족하지 못하는 식별자

식별자의 생성 여부
    내부 식별자 : 엔티티 내부에서 스스로 생성되는 식별자
    외부 식별자 : 다른 엔티티와의 관계로 인하여 만들어지는 식별자

식별자의 속성의 수
    단일 식별자 : 하나의 속성으로 구성
    복합 식별자 : 2개 이상의 속성으로 구성

식별자의 대체 여부
    본질 식별자 : 비지니스 프로세스에서 만들어지는 식별자
        예) 주문번호
    인조 식별자 : 인위적으로 만들어지는 식별자
        다음에 경우에 사용
            후보 식별자 중에서 주식별자로 선정할 것이 없을 경우
            주식별자가 너무 많은 칼럼으로 되어 있는 경우
            순서번호를 사용해서 식별자를 만든다.
            예) 시퀀스, jpa












